Magesh Kuppan

Methodology:
    100% Hands on
    No powerpoint

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM 

About You:
    Name
    Total Experience
    Primary Skillset
    Experience in Angular ( if any )

What is Angular?
    Angular is a framework for building Rich Internet Applications


Salary Calculator
    Net = Basic + HRA + DA - Tax(%)

Assumption
    1. The implementation meets 100% of the user requirements. (Validations are not needed)
    2. Refactoring the code to different files is taken care by the 'deployment' team

https://github.com/tkmagesh/shell-angular-jan-2022

Reactive (Dumb) X Proactive (Knowledge)


Assignment

1. Convert the SalaryCalculatorModel into an ES6 class

2. Given the below products:
    var products = [
        {id : 6, name : 'Pen', cost : 50, units : 20, category : 'stationary'},
        {id : 9, name : 'Ten', cost : 70, units : 70, category : 'stationary'},
        {id : 3, name : 'Len', cost : 60, units : 60, category : 'grocery'},
        {id : 5, name : 'Zen', cost : 30, units : 30, category : 'grocery'},
        {id : 1, name : 'Ken', cost : 20, units : 80, category : 'utencil'},
        {id : 7, name : 'Mouse', cost : 100, units : 20, category : 'electronics'}
    ];

    1. Sort the products by cost (use 'sort()' method and arrow function)
    2. Filter all the stationary products (using 'filter()' method and arrow function)
    3. Print the name and discounted price (apply 10% discount) of each product (use 'forEach()' method and arrow function)
    4. Find the max cost among the products (use 'reduce()' method and arrow function)
    5. Find the total units of all the products (use 'reduce()' method and arrow function)
    6. Find the average cost of all the products (use 'reduce()' method and arrow function)
    8. Group the products by category


TypeScript

JavaScript is a loosely type language

var x;
x = 10;
x = 'Hello';
x = true;
x = {};
x = [];

In C#:
int x;

var x = 100; //=> implicitly typed local variables



function add(x,y){
    return x + y
}

function add(x,y){
    if (typeof x !== 'number' || typeof y !== 'number'){
        throw new Error('Invalid Input');
    }
    return x + y;
}

add(10,20);
add(10, "20");
add(10, "abc")
add([10,20],[30,40])
add([10,20],[30,"40"])
add([10,20],[30,"40","abc"])
add([10,20],[30,["40","abc"]])
add(10)
add()
add(10,20,30,40,50)
add(function(){ return 10;})
add(function(){ return [10,20]; }, function(){ return [30,["40","abc"]]; })
add([function(){ return [10,20]; }, function(){ return [30,["40","abc"]]; }])

function add(...args){
    function parseArg(n){
        if (Array.isArray(n)) return add(...n);
        if (typeof n === 'function') return parseArg(n());
        return isNaN(n) ? 0 : parseInt(n)
    }
    return args.length <= 1 ? parseArg(args[0]) : parseArg(args[0]) + add(args.slice(1))
}

TypeScript = JavaScript + Type Safety

var x : number;

function add(x : number, y : number) : number {  
    return x + y;
}

add(10, "abc")
        |
        |
        V
    typescript compiler
        |
        |
        V
function add(x, y) {  
    return x + y;
}

1. Access modifiers (public, private, protected)
2. Class
3. Arrow functions
4. Interfaces
5. Enums
6. Generics

http://typescriptlang.org




var nos : Array<number> = []
nos.push(10);
nos.push("abc");

Angular
    Framework for building RIA/SPA applications

Building Blocks 
    1. Component
        Encapsulation of Presenation (html + css) + UI Behavior (User interaction events) + State
        Components can be composed together
        App UI = is just one big component
    2. Directive
        DOM Manipulations
    3. Pipe
        Data Transformation for presentation
    4. Service
        Non UI responsibilities
    5. Module
        Registry of application entities (Components, Directives, Pipes, Services etc)
        There has to be a minimum of 1 module in the application
        A module is the 'starting point' of the application

            declaration => register all UI entites (Component, Directive & Pipe)
            providers => register all non-ui entities (Services)
            imports => register all other dependent modules
            bootstrap => register the top-most components

Angular CLI
    To Install
        npm install -g @angular/cli



NPM (Node Package Manager)

Python - PIP
.NET - NuGet
Java - Maven
Ruby - Gem

To create the application
    ng new <app-name>

Package.json
    Metadata information about the application
        Name
        Version
        Description
        Author
        License
        Repository
        Dependencies (runtime dependencies)
            angular framework packages
        devDependencies (dependencies for performing development activities)
            typescript compiler
            testing tools
            build tools
            static code analysis tools
        scripts
            configure the 'commands' to perform the development activities on the code base

To run the application
    cd <app-name>
    npm start

ES6 Modules
    1. Everything defined in a file is considered 'private'
    2. All entities that are to be exposed as 'public' have to be explicitly 'exported'
    3. All public entities from other files have to be explicitly 'imported' for use


Directives
    - attribute directive
        manipulates the attributes of an 'existing' dom node
        does NOT change the structure of the DOM tree (by adding or removing dom nodes)
        used with the '[]' syntax

    - structural directive
        changes the structure of the DOM tree by adding or removing dom nodes
        used with the '*' prefix


Assignments:
    1. Enable the user to dynamically add products (products component)
    2. Create a 'SalaryCalculator' component 


Dependency Inversion Principle
    Dependencies should NOT BE created and used in the same place
    Dependency Creation should be seperated from Usage


Agile Principles Patterns & Practices
    SOLID
        Single Responsibility Principle
        Open/Closed Principle
        Liskov Substitution Principle
        Interface Segregation Principle
        Dependency Inversion Principle

        
Structure and Interpretation of Computer Programs (SICP)
Growing Object Oriented Software Guided By Tests
Refactoring
Refactoring to Patterns


Assignment (Day-3)
9. Persist the bugs in the browser storage (window.localStorage)

window.localStorage
    - Persistent storage
    - key/value store
    - key has to be unique
    - key & value must be strings
        use JSON.stringify() & JSON.parse() for serialization & deserialization respectively
    - security is taken care by SOP (Same Origin Policy)
    - use this storage feature ONLY for data that the application can afford to loose
    - APIs
        - setItem(key, value)   // => insert OR update the key & value
        - getItem(key)          // => return value for the given key
        - removeItem(key)       // => remove the key & value from the storage
        - clear()               // => remove all the key & values
        - key(index)            // => key at index
        - length                // => # of key/value pairs in the storage


Async Operations:
    1. Callbacks
    2. Events
    3. Promises
    4. Async Await
    5. ES6 Generations
    6. Observables

Observable
    object that respresents a stream of events

Server communication
    HttpClientModule -> @angular/common/http 
    HttpClient
        - get => Observable
        - post => Observable
        - put => Observable
        - patch => Observable
        - delete => Observable

    const observable = this.http.get(url);
    observable.subscribe(
        data => {
            console.log(data);
        },
        error => {
            console.log(error);
        }
    );


JSON Server (command line tool)
    Serve the data from a .json file as restful service

Routing
https://www.amazon.in
https://www.amazon.in/electronics
https://www.amazon.in/electronics/mobile-phones
https://www.amazon.in/electronics/mobile-phones/google
https://www.amazon.in/electronics/mobile-phones/google/pixel-5

https://www.amazon.in/electronics/mobile-phones/google/pixel-5/reviews => bookmark



Outlook
Outlook/inbox
Outlook/inbox/projects
Outlook/inbox/projects/bug-tracker
Outlook/inbox/projects/bug-tracker/bugs

Outlook/inbox/projects/bug-tracker/bugs/bug-101


http://localhost:4200/salary-calculator

http://localhost:4200/greeter
http://localhost:4200/calculator


go to http://localhost:4200
    click "Salary Calculator" button


All the modules of the application has to accessed using unique urls (bookmarkable)

http://localhost:4200

Validations
    visited?
    attempted to change the data?
    data is valid? (type of validation)

When to display the error message?
    if (!visited)
        dont display the error message
    else 
        if (!attemptedToChangeData)
            dont display the error message
        else
            if (!dataIsValid)
                display the error message
            else
                dont display the error message


    form control
        isPristine
        isValid
        isInvalid
        isDirty
        isTouched