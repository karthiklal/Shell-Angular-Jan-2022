1. let
2. const
3. array destructuring
    var nos = [3,1,4,2,5]
    var [x, y] = nos

4. rest operator (array)
    var nos = [3,1,4,2,5]
    var [x, y, ...z] = nos

5. spread operator (array)
    var nos = [3,1,4,2,5]
    var newNos = [...nos, 10, 20,30]

6. object destructuring
    var emp = { id : 100, name : 'Magesh', salary : 10000, city : 'Bangalore' }
    var {salary, id} = emp
    var {salary : x, id : y} = emp

7. rest operator (object)
    var emp = { id : 100, name : 'Magesh', salary : 10000, city : 'Bangalore' }
    var {salary, id, ...z} = emp

8. spread operator (object)
    var newEmp = { ...emp, org : 'Shell' }

9. default parameters
    function add(x = 10, y = 20){
        return x + y;
    }
    add()
    add(100)
    add(undefined, 200)
    add(100,200)

10. Arrow functions
    /*
        //function statement
        function add(x,y){
            return x + y;
        }

        //function expression
        var add = function(x,y){
            return x + y;
        }

        var add = (x,y) => {
            return x + y;
        }
    */
    var add = (x,y) => x + y;

11. object construction enhancement
    var x = 100, y = 200
    var obj = { x , y}

12. template literal
    var x = 10, y = 20
    var s1 = 'sum of ' + x + ' and ' + y + ' is ' + (x+y)
    var s2 = `sum of ${x} and ${y} is ${x+y}`

    var s3 = `sum of
        ${x} and ${y} 
        is ${x+y}
    `;

13. for of
    var nos = [3,1,4,2,5]
    for (let no of nos)
        console.log(no)

14. class
    class Employee{
        id = 0;
        name = '';
        salary = 0;

        constructor(id, name, salary){
            this.id = id;
            this.name = name;
            this.salary = salary;
        }

        display(){
            console.log(`id = ${this.id}, name = ${this.name} and salary = ${this.salary}`);
        }
    }

15. class inheritance
        class Employee{
        id = 0;
        name = '';
        salary = 0;

        constructor(id, name, salary){
            this.id = id;
            this.name = name;
            this.salary = salary;
        }

        display(){
            console.log(`id = ${this.id}, name = ${this.name} and salary = ${this.salary}`);
        }
    }
    
    class FulltimeEmployee extends Employee{
        benefits = '';
        constructor(id, name, salary, benefits){
            super(id, name, salary);
            this.benefits = benefits;
        }
    }
    
    var fte = new FulltimeEmployee(200, 'Suresh', 20000, 'Good food!')